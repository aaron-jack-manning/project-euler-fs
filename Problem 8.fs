open System.Linq

[<EntryPoint>]
let main argv =

    let inputNumber:int64 list = Array.toList [|7L; 3L; 1L; 6L; 7L; 1L; 7L; 6L; 5L; 3L; 1L; 3L; 3L; 0L; 6L; 2L; 4L; 9L; 1L; 9L; 2L; 2L; 5L; 1L; 1L; 9L; 6L; 7L; 4L; 4L; 2L; 6L; 5L; 7L; 4L; 7L; 4L; 2L; 3L; 5L; 5L; 3L; 4L; 9L; 1L; 9L; 4L; 9L; 3L; 4L; 9L; 6L; 9L; 8L; 3L; 5L; 2L; 0L; 3L; 1L; 2L; 7L; 7L; 4L; 5L; 0L; 6L; 3L; 2L; 6L; 2L; 3L; 9L; 5L; 7L; 8L; 3L; 1L; 8L; 0L; 1L; 6L; 9L; 8L; 4L; 8L; 0L; 1L; 8L; 6L; 9L; 4L; 7L; 8L; 8L; 5L; 1L; 8L; 4L; 3L; 8L; 5L; 8L; 6L; 1L; 5L; 6L; 0L; 7L; 8L; 9L; 1L; 1L; 2L; 9L; 4L; 9L; 4L; 9L; 5L; 4L; 5L; 9L; 5L; 0L; 1L; 7L; 3L; 7L; 9L; 5L; 8L; 3L; 3L; 1L; 9L; 5L; 2L; 8L; 5L; 3L; 2L; 0L; 8L; 8L; 0L; 5L; 5L; 1L; 1L; 1L; 2L; 5L; 4L; 0L; 6L; 9L; 8L; 7L; 4L; 7L; 1L; 5L; 8L; 5L; 2L; 3L; 8L; 6L; 3L; 0L; 5L; 0L; 7L; 1L; 5L; 6L; 9L; 3L; 2L; 9L; 0L; 9L; 6L; 3L; 2L; 9L; 5L; 2L; 2L; 7L; 4L; 4L; 3L; 0L; 4L; 3L; 5L; 5L; 7L; 6L; 6L; 8L; 9L; 6L; 6L; 4L; 8L; 9L; 5L; 0L; 4L; 4L; 5L; 2L; 4L; 4L; 5L; 2L; 3L; 1L; 6L; 1L; 7L; 3L; 1L; 8L; 5L; 6L; 4L; 0L; 3L; 0L; 9L; 8L; 7L; 1L; 1L; 1L; 2L; 1L; 7L; 2L; 2L; 3L; 8L; 3L; 1L; 1L; 3L; 6L; 2L; 2L; 2L; 9L; 8L; 9L; 3L; 4L; 2L; 3L; 3L; 8L; 0L; 3L; 0L; 8L; 1L; 3L; 5L; 3L; 3L; 6L; 2L; 7L; 6L; 6L; 1L; 4L; 2L; 8L; 2L; 8L; 0L; 6L; 4L; 4L; 4L; 4L; 8L; 6L; 6L; 4L; 5L; 2L; 3L; 8L; 7L; 4L; 9L; 3L; 0L; 3L; 5L; 8L; 9L; 0L; 7L; 2L; 9L; 6L; 2L; 9L; 0L; 4L; 9L; 1L; 5L; 6L; 0L; 4L; 4L; 0L; 7L; 7L; 2L; 3L; 9L; 0L; 7L; 1L; 3L; 8L; 1L; 0L; 5L; 1L; 5L; 8L; 5L; 9L; 3L; 0L; 7L; 9L; 6L; 0L; 8L; 6L; 6L; 7L; 0L; 1L; 7L; 2L; 4L; 2L; 7L; 1L; 2L; 1L; 8L; 8L; 3L; 9L; 9L; 8L; 7L; 9L; 7L; 9L; 0L; 8L; 7L; 9L; 2L; 2L; 7L; 4L; 9L; 2L; 1L; 9L; 0L; 1L; 6L; 9L; 9L; 7L; 2L; 0L; 8L; 8L; 8L; 0L; 9L; 3L; 7L; 7L; 6L; 6L; 5L; 7L; 2L; 7L; 3L; 3L; 3L; 0L; 0L; 1L; 0L; 5L; 3L; 3L; 6L; 7L; 8L; 8L; 1L; 2L; 2L; 0L; 2L; 3L; 5L; 4L; 2L; 1L; 8L; 0L; 9L; 7L; 5L; 1L; 2L; 5L; 4L; 5L; 4L; 0L; 5L; 9L; 4L; 7L; 5L; 2L; 2L; 4L; 3L; 5L; 2L; 5L; 8L; 4L; 9L; 0L; 7L; 7L; 1L; 1L; 6L; 7L; 0L; 5L; 5L; 6L; 0L; 1L; 3L; 6L; 0L; 4L; 8L; 3L; 9L; 5L; 8L; 6L; 4L; 4L; 6L; 7L; 0L; 6L; 3L; 2L; 4L; 4L; 1L; 5L; 7L; 2L; 2L; 1L; 5L; 5L; 3L; 9L; 7L; 5L; 3L; 6L; 9L; 7L; 8L; 1L; 7L; 9L; 7L; 7L; 8L; 4L; 6L; 1L; 7L; 4L; 0L; 6L; 4L; 9L; 5L; 5L; 1L; 4L; 9L; 2L; 9L; 0L; 8L; 6L; 2L; 5L; 6L; 9L; 3L; 2L; 1L; 9L; 7L; 8L; 4L; 6L; 8L; 6L; 2L; 2L; 4L; 8L; 2L; 8L; 3L; 9L; 7L; 2L; 2L; 4L; 1L; 3L; 7L; 5L; 6L; 5L; 7L; 0L; 5L; 6L; 0L; 5L; 7L; 4L; 9L; 0L; 2L; 6L; 1L; 4L; 0L; 7L; 9L; 7L; 2L; 9L; 6L; 8L; 6L; 5L; 2L; 4L; 1L; 4L; 5L; 3L; 5L; 1L; 0L; 0L; 4L; 7L; 4L; 8L; 2L; 1L; 6L; 6L; 3L; 7L; 0L; 4L; 8L; 4L; 4L; 0L; 3L; 1L; 9L; 9L; 8L; 9L; 0L; 0L; 0L; 8L; 8L; 9L; 5L; 2L; 4L; 3L; 4L; 5L; 0L; 6L; 5L; 8L; 5L; 4L; 1L; 2L; 2L; 7L; 5L; 8L; 8L; 6L; 6L; 6L; 8L; 8L; 1L; 1L; 6L; 4L; 2L; 7L; 1L; 7L; 1L; 4L; 7L; 9L; 9L; 2L; 4L; 4L; 4L; 2L; 9L; 2L; 8L; 2L; 3L; 0L; 8L; 6L; 3L; 4L; 6L; 5L; 6L; 7L; 4L; 8L; 1L; 3L; 9L; 1L; 9L; 1L; 2L; 3L; 1L; 6L; 2L; 8L; 2L; 4L; 5L; 8L; 6L; 1L; 7L; 8L; 6L; 6L; 4L; 5L; 8L; 3L; 5L; 9L; 1L; 2L; 4L; 5L; 6L; 6L; 5L; 2L; 9L; 4L; 7L; 6L; 5L; 4L; 5L; 6L; 8L; 2L; 8L; 4L; 8L; 9L; 1L; 2L; 8L; 8L; 3L; 1L; 4L; 2L; 6L; 0L; 7L; 6L; 9L; 0L; 0L; 4L; 2L; 2L; 4L; 2L; 1L; 9L; 0L; 2L; 2L; 6L; 7L; 1L; 0L; 5L; 5L; 6L; 2L; 6L; 3L; 2L; 1L; 1L; 1L; 1L; 1L; 0L; 9L; 3L; 7L; 0L; 5L; 4L; 4L; 2L; 1L; 7L; 5L; 0L; 6L; 9L; 4L; 1L; 6L; 5L; 8L; 9L; 6L; 0L; 4L; 0L; 8L; 0L; 7L; 1L; 9L; 8L; 4L; 0L; 3L; 8L; 5L; 0L; 9L; 6L; 2L; 4L; 5L; 5L; 4L; 4L; 4L; 3L; 6L; 2L; 9L; 8L; 1L; 2L; 3L; 0L; 9L; 8L; 7L; 8L; 7L; 9L; 9L; 2L; 7L; 2L; 4L; 4L; 2L; 8L; 4L; 9L; 0L; 9L; 1L; 8L; 8L; 8L; 4L; 5L; 8L; 0L; 1L; 5L; 6L; 1L; 6L; 6L; 0L; 9L; 7L; 9L; 1L; 9L; 1L; 3L; 3L; 8L; 7L; 5L; 4L; 9L; 9L; 2L; 0L; 0L; 5L; 2L; 4L; 0L; 6L; 3L; 6L; 8L; 9L; 9L; 1L; 2L; 5L; 6L; 0L; 7L; 1L; 7L; 6L; 0L; 6L; 0L; 5L; 8L; 8L; 6L; 1L; 1L; 6L; 4L; 6L; 7L; 1L; 0L; 9L; 4L; 0L; 5L; 0L; 7L; 7L; 5L; 4L; 1L; 0L; 0L; 2L; 2L; 5L; 6L; 9L; 8L; 3L; 1L; 5L; 5L; 2L; 0L; 0L; 0L; 5L; 5L; 9L; 3L; 5L; 7L; 2L; 9L; 7L; 2L; 5L; 7L; 1L; 6L; 3L; 6L; 2L; 6L; 9L; 5L; 6L; 1L; 8L; 8L; 2L; 6L; 7L; 0L; 4L; 2L; 8L; 2L; 5L; 2L; 4L; 8L; 3L; 6L; 0L; 0L; 8L; 2L; 3L; 2L; 5L; 7L; 5L; 3L; 0L; 4L; 2L; 0L; 7L; 5L; 2L; 9L; 6L; 3L; 4L; 5L; 0L|]

    let adjacentDigits = 13

    let mutable maximumProduct = 0L

    for i = 1 to (List.length inputNumber) - adjacentDigits - 1 do
        let adjacentProduct = inputNumber.[i..(i + adjacentDigits - 1)].Aggregate(fun a b -> a * b)

        maximumProduct <- if adjacentProduct > maximumProduct then adjacentProduct else maximumProduct
    
    printf "%i" maximumProduct

    0